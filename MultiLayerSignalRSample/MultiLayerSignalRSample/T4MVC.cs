// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC
{
    public static MultiLayerSignalRSample.Controllers.AccountController Account = new MultiLayerSignalRSample.Controllers.T4MVC_AccountController();
    public static MultiLayerSignalRSample.Controllers.HomeController Home = new MultiLayerSignalRSample.Controllers.T4MVC_HomeController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal class T4MVC_System_Web_Mvc_ViewResult : System.Web.Mvc.ViewResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ViewResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class apps {
            private const string URLPATH = "~/Scripts/apps";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string chat_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/chat.min.js") ? Url("chat.min.js") : Url("chat.js");
                          
        }
    
        public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
                      
        public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
        public static readonly string infuser_amd_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/infuser-amd.min.js") ? Url("infuser-amd.min.js") : Url("infuser-amd.js");
                      
        public static readonly string infuser_amd_min_gz_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/infuser-amd.min.gz.min.js") ? Url("infuser-amd.min.gz.min.js") : Url("infuser-amd.min.gz.js");
                      
        public static readonly string infuser_amd_min_js = Url("infuser-amd.min.js");
        public static readonly string infuser_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/infuser.min.js") ? Url("infuser.min.js") : Url("infuser.js");
                      
        public static readonly string infuser_min_gz_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/infuser.min.gz.min.js") ? Url("infuser.min.gz.min.js") : Url("infuser.min.gz.js");
                      
        public static readonly string infuser_min_js = Url("infuser.min.js");
        public static readonly string jquery_1_8_3_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.8.3.intellisense.min.js") ? Url("jquery-1.8.3.intellisense.min.js") : Url("jquery-1.8.3.intellisense.js");
                      
        public static readonly string jquery_1_8_3_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.8.3.min.js") ? Url("jquery-1.8.3.min.js") : Url("jquery-1.8.3.js");
                      
        public static readonly string jquery_1_8_3_min_js = Url("jquery-1.8.3.min.js");
        public static readonly string jquery_signalR_1_1_0_beta1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.signalR-1.1.0-beta1.min.js") ? Url("jquery.signalR-1.1.0-beta1.min.js") : Url("jquery.signalR-1.1.0-beta1.js");
                      
        public static readonly string jquery_signalR_1_1_0_beta1_min_js = Url("jquery.signalR-1.1.0-beta1.min.js");
        public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
                      
        public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
                      
        public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
        public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
                      
        public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        public static readonly string json2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/json2.min.js") ? Url("json2.min.js") : Url("json2.js");
                      
        public static readonly string json2_min_js = Url("json2.min.js");
        public static readonly string knockout_2_2_0_debug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/knockout-2.2.0.debug.min.js") ? Url("knockout-2.2.0.debug.min.js") : Url("knockout-2.2.0.debug.js");
                      
        public static readonly string knockout_2_2_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/knockout-2.2.0.min.js") ? Url("knockout-2.2.0.min.js") : Url("knockout-2.2.0.js");
                      
        public static readonly string koExternalTemplateEngine_amd_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/koExternalTemplateEngine-amd.min.js") ? Url("koExternalTemplateEngine-amd.min.js") : Url("koExternalTemplateEngine-amd.js");
                      
        public static readonly string koExternalTemplateEngine_amd_min_js = Url("koExternalTemplateEngine-amd.min.js");
        public static readonly string koExternalTemplateEngine_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/koExternalTemplateEngine.min.js") ? Url("koExternalTemplateEngine.min.js") : Url("koExternalTemplateEngine.js");
                      
        public static readonly string koExternalTemplateEngine_min_js = Url("koExternalTemplateEngine.min.js");
        public static readonly string koExternalTemplateEngine_all_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/koExternalTemplateEngine_all.min.js") ? Url("koExternalTemplateEngine_all.min.js") : Url("koExternalTemplateEngine_all.js");
                      
        public static readonly string koExternalTemplateEngine_all_min_js = Url("koExternalTemplateEngine_all.min.js");
        public static readonly string moment_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/moment.min.js") ? Url("moment.min.js") : Url("moment.js");
                      
        public static readonly string moment_min_js = Url("moment.min.js");
        public static readonly string r_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/r.min.js") ? Url("r.min.js") : Url("r.js");
                      
        public static readonly string require_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/require.min.js") ? Url("require.min.js") : Url("require.js");
                      
        public static readonly string sammy_0_7_4_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sammy-0.7.4.min.js") ? Url("sammy-0.7.4.min.js") : Url("sammy-0.7.4.js");
                      
        public static readonly string sammy_0_7_4_min_js = Url("sammy-0.7.4.min.js");
        public static readonly string TrafficCop_amd_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/TrafficCop-amd.min.js") ? Url("TrafficCop-amd.min.js") : Url("TrafficCop-amd.js");
                      
        public static readonly string TrafficCop_amd_min_gz_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/TrafficCop-amd.min.gz.min.js") ? Url("TrafficCop-amd.min.gz.min.js") : Url("TrafficCop-amd.min.gz.js");
                      
        public static readonly string TrafficCop_amd_min_js = Url("TrafficCop-amd.min.js");
        public static readonly string TrafficCop_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/TrafficCop.min.js") ? Url("TrafficCop.min.js") : Url("TrafficCop.js");
                      
        public static readonly string TrafficCop_min_gz_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/TrafficCop.min.gz.min.js") ? Url("TrafficCop.min.gz.min.js") : Url("TrafficCop.min.gz.js");
                      
        public static readonly string TrafficCop_min_js = Url("TrafficCop.min.js");
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string bootstrap_responsive_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-responsive.min.css") ? Url("bootstrap-responsive.min.css") : Url("bootstrap-responsive.css");
             
        public static readonly string bootstrap_responsive_min_css = Url("bootstrap-responsive.min.css");
        public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
             
        public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class font {
            private const string URLPATH = "~/Content/font";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string fontawesome_webfont_eot = Url("fontawesome-webfont.eot");
            public static readonly string fontawesome_webfont_svg = Url("fontawesome-webfont.svg");
            public static readonly string fontawesome_webfont_ttf = Url("fontawesome-webfont.ttf");
            public static readonly string fontawesome_webfont_woff = Url("fontawesome-webfont.woff");
            public static readonly string FontAwesome_otf = Url("FontAwesome.otf");
        }
    
        public static readonly string font_awesome_ie7_min_css = Url("font-awesome-ie7.min.css");
        public static readonly string font_awesome_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/font-awesome.min.css") ? Url("font-awesome.min.css") : Url("font-awesome.css");
             
        public static readonly string font_awesome_min_css = Url("font-awesome.min.css");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class images {
            private const string URLPATH = "~/Content/images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string glyphicons_halflings_white_png = Url("glyphicons-halflings-white.png");
            public static readonly string glyphicons_halflings_png = Url("glyphicons-halflings.png");
        }
    
        public static readonly string Site_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Site.min.css") ? Url("Site.min.css") : Url("Site.css");
             
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591


